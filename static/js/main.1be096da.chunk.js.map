{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Mp3Recorder","MicRecorder","bitRate","App","props","startTimer","setState","timerOn","timerTime","state","timerStart","Date","now","timer","setInterval","stopTimer","clearInterval","resetTimer","start","isBlocked","askMicrophonePermissions","then","isRecording","catch","e","console","error","stop","getMp3","blob","blobURL","URL","createObjectURL","log","navigator","getUserMedia","audio","this","centiseconds","Math","floor","slice","seconds","minutes","hours","className","onClick","disabled","src","controls","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAIMA,EAAc,I,OAAIC,GAAY,CAAEC,QAAS,MA8HhCC,E,kDA3Hd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAWPC,WAAa,WACZ,EAAKC,SAAS,CACbC,SAAS,EACTC,UAAW,EAAKC,MAAMD,UACtBE,WAAYC,KAAKC,MAAQ,EAAKH,MAAMD,YAErC,EAAKK,MAAQC,aAAY,WACxB,EAAKR,SAAS,CACbE,UAAWG,KAAKC,MAAQ,EAAKH,MAAMC,eAElC,KAtBe,EAyBnBK,UAAY,WACX,EAAKT,SAAS,CAAEC,SAAS,IACzBS,cAAc,EAAKH,QA3BD,EA6BnBI,WAAa,WACZ,EAAKX,SAAS,CACbI,WAAY,EACZF,UAAW,KAhCM,EAoCnBU,MAAQ,WACH,EAAKT,MAAMU,UACd,EAAKC,2BAELpB,EAAYkB,QACVG,MAAK,WACL,EAAKf,SAAS,CACbgB,aAAa,IAEC,EAAKjB,gBAEpBkB,OAAM,SAACC,GAAD,OAAOC,QAAQC,MAAMF,OA/CZ,EAmDnBG,KAAO,WACN3B,EAAY2B,OACVC,SACAP,MAAK,YAAqB,IAAD,mBAAVQ,GAAU,WACnBC,EAAUC,IAAIC,gBAAgBH,GACpC,EAAKvB,SAAS,CACbwB,UACAR,aAAa,IAEF,EAAKP,YACL,EAAKE,gBAEjBM,OAAM,SAACC,GAAD,OAAOC,QAAQQ,IAAIT,OA7D3B,EAAKf,MAAQ,CACZa,aAAa,EACbQ,QAAS,GACTX,WAAW,EACXZ,SAAS,EACTG,WAAY,EACZF,UAAW,GARM,E,uEAkES,IAAD,OAC1B0B,UAAUC,aACT,CAAEC,OAAO,IACT,WACC,EAAK9B,SAAS,CAAEa,WAAW,OAE5B,WACC,EAAKb,SAAS,CAAEa,WAAW,S,+BAKpB,IACDX,EAAc6B,KAAK5B,MAAnBD,UACJ8B,GAAgB,IAAOC,KAAKC,MAAMhC,EAAY,IAAM,KAAMiC,OAAO,GACjEC,GAAW,IAAOH,KAAKC,MAAMhC,EAAY,KAAQ,IAAKiC,OAAO,GAC7DE,GAAW,IAAOJ,KAAKC,MAAMhC,EAAY,KAAS,IAAKiC,OAAO,GAC9DG,GAAS,IAAML,KAAKC,MAAMhC,EAAY,OAAUiC,OAAO,GAC3D,OACC,yBAAKI,UAAU,OACd,4BAAQA,UAAU,eACQ,IAAvBR,KAAK5B,MAAMF,SACa,IAAzB8B,KAAK5B,MAAMD,WAAoB6B,KAAK5B,MAAMa,YAMvC,KALH,yBACCwB,QAAST,KAAKnB,MACd6B,SAAUV,KAAK5B,MAAMa,YACrBuB,UAAU,gBAGXR,KAAK5B,MAAMa,YACX,6BACC,yBAAKuB,UAAU,iBACd,4CACA,6BACwB,0BAAMA,UAAU,aACvCD,EADuB,MACbD,EADa,MACDD,EADC,MACWJ,GAEnC,8BAED,4BACCQ,QAAST,KAAKV,KACdoB,UAAWV,KAAK5B,MAAMa,YACtBuB,UAAU,gBAGT,KACJ,2BACCA,UAAU,gBACVG,IAAKX,KAAK5B,MAAMqB,QAChBmB,UAAQ,U,GApHIC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd1C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMwC,a","file":"static/js/main.1be096da.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport MicRecorder from 'mic-recorder-to-mp3';\n\nconst Mp3Recorder = new MicRecorder({ bitRate: 128 });\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisRecording: false,\n\t\t\tblobURL: '',\n\t\t\tisBlocked: false,\n\t\t\ttimerOn: false,\n\t\t\ttimerStart: 0,\n\t\t\ttimerTime: 0,\n\t\t};\n\t}\n\n\tstartTimer = () => {\n\t\tthis.setState({\n\t\t\ttimerOn: true,\n\t\t\ttimerTime: this.state.timerTime,\n\t\t\ttimerStart: Date.now() - this.state.timerTime,\n\t\t});\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\ttimerTime: Date.now() - this.state.timerStart,\n\t\t\t});\n\t\t}, 10);\n\t};\n\n\tstopTimer = () => {\n\t\tthis.setState({ timerOn: false });\n\t\tclearInterval(this.timer);\n\t};\n\tresetTimer = () => {\n\t\tthis.setState({\n\t\t\ttimerStart: 0,\n\t\t\ttimerTime: 0,\n\t\t});\n\t};\n\n\tstart = () => {\n\t\tif (this.state.isBlocked) {\n\t\t\tthis.askMicrophonePermissions();\n\t\t} else {\n\t\t\tMp3Recorder.start()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisRecording: true,\n                    });\n                    this.startTimer();\n\t\t\t\t})\n\t\t\t\t.catch((e) => console.error(e));\n\t\t}\n\t};\n\n\tstop = () => {\n\t\tMp3Recorder.stop()\n\t\t\t.getMp3()\n\t\t\t.then(([buffer, blob]) => {\n\t\t\t\tconst blobURL = URL.createObjectURL(blob);\n\t\t\t\tthis.setState({\n\t\t\t\t\tblobURL,\n\t\t\t\t\tisRecording: false,\n                });\n                this.stopTimer();\n                this.resetTimer();\n\t\t\t})\n\t\t\t.catch((e) => console.log(e));\n\t};\n\n\taskMicrophonePermissions() {\n\t\tnavigator.getUserMedia(\n\t\t\t{ audio: true },\n\t\t\t() => {\n\t\t\t\tthis.setState({ isBlocked: false });\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.setState({ isBlocked: true });\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { timerTime } = this.state;\n\t\tlet centiseconds = ('0' + (Math.floor(timerTime / 10) % 100)).slice(-2);\n\t\tlet seconds = ('0' + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n\t\tlet minutes = ('0' + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n\t\tlet hours = ('0' + Math.floor(timerTime / 3600000)).slice(-2);\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<header className='App-header'>\n\t\t\t\t\t{(this.state.timerOn === false &&\n\t\t\t\t\t\tthis.state.timerTime === 0 && !this.state.isRecording) ? (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={this.start}\n\t\t\t\t\t\t\tdisabled={this.state.isRecording}\n\t\t\t\t\t\t\tclassName='startButton'\n\t\t\t\t\t\t></div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{this.state.isRecording ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div className='recordingTime'>\n\t\t\t\t\t\t\t\t<span> RECORDING</span>\n\t\t\t\t\t\t\t\t<br /> \n                                <span className=\"stopwatch\">\n\t\t\t\t\t\t\t\t{hours} : {minutes} : {seconds} : {centiseconds}\n                                </span>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={this.stop}\n\t\t\t\t\t\t\t\tdisabled={!this.state.isRecording}\n\t\t\t\t\t\t\t\tclassName='stopButton'\n\t\t\t\t\t\t\t></button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<audio\n\t\t\t\t\t\tclassName='audioControls'\n\t\t\t\t\t\tsrc={this.state.blobURL}\n\t\t\t\t\t\tcontrols\n\t\t\t\t\t/>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}