{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Mp3Recorder","MicRecorder","bitRate","App","props","start","state","isBlocked","console","log","then","setState","isRecording","catch","e","error","stop","getMp3","blob","blobURL","URL","createObjectURL","navigator","getUserMedia","audio","className","onClick","this","disabled","src","controls","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAIMA,EAAc,I,OAAIC,GAAY,CAAEC,QAAS,MAuEhCC,E,kDApEd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAQPC,MAAQ,WACH,EAAKC,MAAMC,UACdC,QAAQC,IAAI,qBAEZT,EAAYK,QACVK,MAAK,WACL,EAAKC,SAAS,CAAEC,aAAa,OAE7BC,OAAM,SAACC,GAAD,OAAON,QAAQO,MAAMD,OAjBZ,EAqBnBE,KAAO,WACNhB,EAAYgB,OACVC,SACAP,MAAK,YAAqB,IAAD,mBAAVQ,GAAU,WACnBC,EAAUC,IAAIC,gBAAgBH,GACpC,EAAKP,SAAS,CAAEQ,UAASP,aAAa,OAEtCC,OAAM,SAACC,GAAD,OAAON,QAAQC,IAAIK,OA1B3B,EAAKR,MAAQ,CACZM,aAAa,EACbO,QAAS,GACTZ,WAAW,GALM,E,gEA+BE,IAAD,OACnBe,UAAUC,aACT,CAAEC,OAAO,IACT,WACChB,QAAQC,IAAI,sBACZ,EAAKE,SAAS,CAAEJ,WAAW,OAE5B,WACCC,QAAQC,IAAI,qBACZ,EAAKE,SAAS,CAAEJ,WAAW,S,+BAM7B,OACC,yBAAKkB,UAAU,OACd,4BAAQA,UAAU,cACjB,4BACCC,QAASC,KAAKtB,MACduB,SAAUD,KAAKrB,MAAMM,aAFtB,UAMA,4BACCc,QAASC,KAAKX,KACdY,UAAWD,KAAKrB,MAAMM,aAFvB,QAMA,2BAAOiB,IAAKF,KAAKrB,MAAMa,QAASW,SAAS,mB,GA9D5BC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAE,GACLP,QAAQO,MAAMA,EAAMgC,a","file":"static/js/main.9b97e2ea.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport MicRecorder from 'mic-recorder-to-mp3';\n\nconst Mp3Recorder = new MicRecorder({ bitRate: 128 });\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisRecording: false,\n\t\t\tblobURL: '',\n\t\t\tisBlocked: false,\n\t\t};\n\t}\n\n\tstart = () => {\n\t\tif (this.state.isBlocked) {\n\t\t\tconsole.log('Permission Denied');\n\t\t} else {\n\t\t\tMp3Recorder.start()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.setState({ isRecording: true });\n\t\t\t\t})\n\t\t\t\t.catch((e) => console.error(e));\n\t\t}\n\t};\n\n\tstop = () => {\n\t\tMp3Recorder.stop()\n\t\t\t.getMp3()\n\t\t\t.then(([buffer, blob]) => {\n\t\t\t\tconst blobURL = URL.createObjectURL(blob);\n\t\t\t\tthis.setState({ blobURL, isRecording: false });\n\t\t\t})\n\t\t\t.catch((e) => console.log(e));\n\t};\n\n\tcomponentDidMount() {\n\t\tnavigator.getUserMedia(\n\t\t\t{ audio: true },\n\t\t\t() => {\n\t\t\t\tconsole.log('Permission Granted');\n\t\t\t\tthis.setState({ isBlocked: false });\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tconsole.log('Permission Denied');\n\t\t\t\tthis.setState({ isBlocked: true });\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<header className='App-header'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={this.start}\n\t\t\t\t\t\tdisabled={this.state.isRecording}\n\t\t\t\t\t>\n\t\t\t\t\t\tRecord\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={this.stop}\n\t\t\t\t\t\tdisabled={!this.state.isRecording}\n\t\t\t\t\t>\n\t\t\t\t\t\tStop\n\t\t\t\t\t</button>\n\t\t\t\t\t<audio src={this.state.blobURL} controls='controls' />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}